---
import { type CollectionEntry, getCollection } from "astro:content";
import BackToPrev from "~/components/BackToPrev.astro";
import Container from "~/components/Container.astro";
import FormattedDate from "~/components/FormattedDate.astro";
import RootLayout from "~/layouts/RootLayout.astro";
import { readingTime } from "~/lib/utils";

export async function getStaticPaths() {
	const posts = (await getCollection("blog"))
		.filter((post) => !post.data.draft)
		.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
---

<script>
	function getCodeFromCodeBlock(codeBlockElement: Element) {
		const lines = codeBlockElement.querySelectorAll(".line");
		const code = [...lines].map((line) => line.textContent).join("\n");
		return code;
	}

	function getButtonInnerHTML(text: string) {
		return text;
	}

	function addCopyButtonToCodeBlock(codeBlockElement: Element) {
		const button = document.createElement("button");

		button.classList.add("copy-button");
		button.innerHTML = getButtonInnerHTML("Copy");

		button.addEventListener("click", async () => {
			button.disabled = true;
			const code = getCodeFromCodeBlock(codeBlockElement);
			try {
				await navigator.clipboard.writeText(code);
				button.innerHTML = getButtonInnerHTML("Copied!");
				setTimeout(() => {
					button.innerHTML = getButtonInnerHTML("Copy");
					button.disabled = false;
				}, 2000);
			} catch {
				button.innerHTML = getButtonInnerHTML("Error");
				setTimeout(() => {
					button.innerHTML = getButtonInnerHTML("Copy");
					button.disabled = false;
				}, 2000);
			}
		});

		codeBlockElement.appendChild(button);
	}

	function addCopyToCodeBlocks() {
		const codeBlocks = document.querySelectorAll(".astro-code code");
		codeBlocks.forEach(addCopyButtonToCodeBlock);
	}

	addCopyToCodeBlocks();
</script>

<RootLayout title={post.data.title} description={post.data.description}>
	<Container>
		<div class="animate">
			<BackToPrev href="/blog/"> Back to blog </BackToPrev>
		</div>
		<div class="my-10 space-y-1">
			<div class="animate flex items-center gap-1.5">
				<div class="font-base text-sm">
					<FormattedDate date={post.data.date} />
				</div>
				&bull;
				<div class="font-base text-sm">
					{readingTime(post.body)}
				</div>
			</div>
			<div class="animate text-2xl font-semibold text-black dark:text-white">
				{post.data.title}
			</div>
		</div>
		<article class="animate">
			<Content />
		</article>
	</Container>
</RootLayout>
